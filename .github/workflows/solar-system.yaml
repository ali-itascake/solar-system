name: solar system workflow

on: 
  workflow_dispatch:   
  push: 
    branches: 
    - main
    - features/* 
      

env: 
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}   
  ECR_REPOSITORY: itascake
  IMAGE_TAG: ${{ github.sha}}
  BRANCH_NAME: ${{ github.ref_name }}
  CUSTOM_TAG:  0.0.1     

jobs: 
  unit-testing: 
    runs-on: ubuntu-latest
    outputs:
      IMAGE: ${{steps.build-and-push.outputs.IMAGE}}
    steps: 
    - name: Checkout the repository
      uses: actions/checkout@v4 
      
    - name: Cache npm
      id: cache-npm
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-module

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with: 
        node-version: 18 
        
    - name: Install npm dependencies
      run: npm install 
      
    - name: Run tests
      run: npm test    
      
    - name: Archive reports
      uses: actions/upload-artifact@v3
      with:
        name: test-reports
        path: path/to/your/reports
    - name: AWS LOGIN 
      uses: aws-actions/configure-aws-credentials@v4
      with:
         aws-access-key-id : ${{ secrets.AWS_ACCESS_ID}}
         aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY}}
         aws-region: ${{ vars.AWS_REGION}}
  
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
          

    - name: Docker build and push 
      id: build-and-push
      env: 
        ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
      run: | 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY/nginx:$CUSTOM_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
        echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TA >> GITHUB.OUTPUT

  Deploy-todev: 
    needs: unit-testing
    runs-on: ubuntu-latest
    environment:
      name: prod 
    steps: 
    - name: install kubectl 
      uses: azure/setup-kubectl@v3
      with:
       version: '1.28' # default is latest stable
        
    - name:  set context  
      uses: azure/k8s-set-context@v4
      with:
       method: kubeconfig
       kubeconfig: ${{ secrets.KUBE_CONFIG}}  
    - name: repalce token
      uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '{'
        tokenSuffix: '}'
        files: '["kubernetes/development"]' 
      env: 
        NAMESPACE: ${{vars.NAMESPACE}}
        IMAGE: ${{needs.unit-testing.outputs.IMAGE}}
        REPLICAS: ${{vars.REPLICAS}}

